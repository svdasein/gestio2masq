#!/usr/bin/env ruby
require 'mysql2'
require 'ipaddress'
require 'yaml'
require 'trollop'
require 'gestio2masq'

defaults = {
    :config => '/etc/gestio2masq.conf',
    :destdir => '/etc',
    :sqlhost => 'localhost',
    :database => 'gestioip',
    :sqluser => 'root'
}

opts = Trollop::options do
  version %Q{gestio2masq #{Gestio2masq::VERSION} (c)2015 David A. Parker}
	banner <<-EOS

gestio2masq: generate dnsmasq configuration from a gestioip mysql database

Usage:
       gestio2masq [options]

[options]:


	EOS

  opt :config,   'Config file path',  :short=>'c', :type=>:string
  opt :destdir,  'Destination dir',   :short=>'t', :type=>:string
  opt :sqlhost,  'Database host',     :short=>'h', :type=>:string
  opt :database, 'Database name',     :short=>'d', :type=>:string
  opt :sqluser,  'Database user',     :short=>'u', :type=>:string
  opt :sqlpass,  'Database password', :short=>'p', :type=>:string
  opt :verbose,  'Verbose output',    :short=>'v'
end

config_file = opts[:config]||defaults[:config]

config = nil
if File.exist?(config_file)
  begin
  	config = YAML.load(File.read(config_file))
  rescue => detail
    puts detail.backtrace
  	puts %Q(Error reading config from file #{config_file})
    exit(1)
  end
end

if config.nil? or (config.class != Hash)
  config = Hash.new
else
  # symbolize hash keys (json format compatibility)
  config = Hash[config.map{|(k,v)| [k.to_sym,v]}]
end

# Precedence (low to high): defaults, config file, command line
config = defaults.merge(config).merge(Hash(opts.select {|k,v| !v.nil?}))

begin
	mysql = Mysql2::Client.new(
		 :host => config[:sqlhost],
		 :username => config[:sqluser],
		 :password => config[:sqlpass],
		 :database => config[:database]
	)
rescue
	puts %Q(Error connecting to database #{config[:database]} on host #{config[:sqlhost]} as #{config[:sqluser]}.)
	exit(status=1)
end

networks_data = mysql.query('select * from net',:symbolize_keys => true)
ranges_data = mysql.query('select * from ranges',:symbolize_keys => true)
hosts_data = mysql.query('select * from host order by hostname',:symbolize_keys => true)
hosts_extra_data = mysql.query('select custom_host_column_entries.*,custom_host_columns.name
                               from custom_host_column_entries,custom_host_columns
                               where custom_host_columns.id = custom_host_column_entries.cc_id',
                               :symbolize_keys => true)
nets_extra_data = mysql.query('select custom_net_column_entries.*,custom_net_columns.name
                               from custom_net_column_entries,custom_net_columns
                               where custom_net_columns.id = custom_net_column_entries.cc_id',
                               :symbolize_keys => true)

networks = Hash.new
networks_data.each { |net|
	nets_extra_data.select { |each| each[:net_id] == net[:red_num] } .each { |entry|
		net[entry[:name].to_sym] = entry[:entry]
	}
	net[:bitmask] = IPAddress.parse("#{net[:red]}/#{net[:BM]}").netmask
	networks[net[:red_num]] = net
}

ranges_entries = Array.new
ranges_data.each { |range|
	network = networks[range[:red_num].to_i]
	start_ip = IPAddress::IPv4.parse_u32(range[:start_ip].to_i)
	end_ip = IPAddress::IPv4.parse_u32(range[:end_ip].to_i)
	ranges_entries.push("dhcp-range=#{network[:optiontag]},#{start_ip},#{end_ip},#{network[:bitmask]},#{network[:dynleasetime]}")
}

hosts_entries = Array.new
dhcp_hosts_entries = Array.new
cnames_entries = Array.new
hosts_data.each { |host|
	host[:ipaddress] = IPAddress::IPv4.parse_u32(host[:ip].to_i)
	hosts_extra_data.select { |each| each[:host_id] == host[:id] } .each { |entry|
		host[entry[:name].to_sym] = entry[:entry]
	}
	host[:network] = networks[host[:red_num]]
	if host[:hostname].size > 0
		if host[:MAC]
			# static dhcp assignment
			if host[:optiontag]
				dhcp_hosts_entries.push("#{host[:MAC]},set:#{host[:optiontag]},#{host[:hostname].split('.').shift},#{host[:ipaddress]},#{host[:network][:leasetime]}")
			else
				dhcp_hosts_entries.push("#{host[:MAC]},#{host[:hostname].split('.').shift},#{host[:ipaddress]},#{host[:network][:leasetime]}")
			end
		end
		# hostname
		hosts_entries.push("#{host[:ipaddress]}\t#{host[:hostname]}.#{host[:network][:domain]}")
		if host[:CNAMEs]
			host[:CNAMEs].split(':').each { |cname|
				cnames_entries.push("cname=#{cname},#{host[:hostname]}.#{host[:network][:domain]}")
			}
		end
	end
}
puts "="*80 if config[:verbose]
puts "RANGES: #{ranges_entries.size}"
File.new(%Q(#{config[:destdir]}/dnsmasq.d/ranges),'w').puts(ranges_entries.join("\n"))
puts(ranges_entries.join("\n")) if config[:verbose]
puts "="*80 if config[:verbose]
puts "CNAMES: #{cnames_entries.size}"
File.new(%Q(#{config[:destdir]}/dnsmasq.d/cnames),'w').puts(cnames_entries.join("\n"))
puts(cnames_entries.join("\n")) if config[:verbose]
puts "="*80 if config[:verbose]
puts "DHCP HOSTS: #{dhcp_hosts_entries.size}"
File.new(%Q(#{config[:destdir]}/dnsmasq-dhcp-hosts.conf),'w').puts(dhcp_hosts_entries.join("\n"))
puts(dhcp_hosts_entries.join("\n")) if config[:verbose]
puts "="*80 if config[:verbose]
puts "HOSTS: #{hosts_entries.size}"
File.new(%Q(#{config[:destdir]}/dnsmasq-hosts.conf),'w').puts(hosts_entries.join("\n"))
puts(hosts_entries.join("\n")) if config[:verbose]

